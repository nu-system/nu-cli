const chalk = require('chalk');
const fse = require('fs-extra');
const inquirer = require('inquirer');
const path = require('path');

function Creator() {
  // Â≠òÂÇ®ÂëΩ‰ª§Ë°åËé∑ÂèñÁöÑÊï∞ÊçÆÔºå‰Ωú‰∏∫demoËøôÈáåÂè™Ë¶ÅËøô‰∏§‰∏™Ôºõ
  this.options = {
    // ‰ΩúËÄÖÂêçÁß∞
    author: 'ziven27',
    // ÁªÑ‰ª∂Á±ªÂûã
    componentType: 'css',
    // ÁªÑ‰ª∂ÂêçÁß∞
    componentName: 'hello'
  };
  this.init();
}
// ÂàùÂßãÂåñ
Creator.prototype.init = function () {
  console.log(chalk.green(`\nüëá nu-cli start`));
  this.ask().then((answers) => {
    this.options = Object.assign({}, this.options, answers);
    this.write();
  });
};
// ÂëΩ‰ª§Ë°å‰∫§‰∫í
Creator.prototype.ask = function () {
  // ËøîÂõûpromise
  return inquirer.prompt([{
    type: 'list',
    name: 'componentType',
    message: 'Select component type:',
    choices: [
      { name: "CSS", value: 'css' },
      { name: "React", value: 'react' },
      { name: "HTML", value: 'html' },
      { name: "Javascript", value: 'js' },
      { name: "VUE", value: 'vue'},
      { name: "React Native", value: 'rn', disabled: true }
    ]
  }, {
    name: 'componentName',
    message: 'Input component name:',
    validate(input) {
      if (!input) {
        return 'input component name';
      }
      if (fse.existsSync(input)) {
        return 'the' + input + ' is exist';
      }
      return true;
    }
  }, {
    name: 'author',
    message: 'Input author name:',
  }]);
};

Creator.prototype.write = function () {
  const { componentType, componentName, author } = this.options;
  const dirName = `${componentType}-${componentName}`;

  console.log(`\nüëâ [${dirName}] is building...`);

  // Ëé∑ÂèñÂΩìÂâçÂëΩ‰ª§ÁöÑÊâßË°åÁõÆÂΩïÔºåÊ≥®ÊÑèÂíåÈ°πÁõÆÁõÆÂΩïÂå∫ÂàÜ
  const cwd = process.cwd();
  const tplBuilder = require(`./builder/${componentType}.js`);
  tplBuilder && tplBuilder({
    data: this.options,
    dirRoot: path.resolve(__dirname, '../'),
    dirProject: path.join(cwd, dirName)
  }).then(() => {
    console.log(chalk.green(`\nüëá [${dirName}] build success`));
    console.log(`install: ${chalk.yellow(`cd ${dirName}`)} && ${chalk.yellow("npm install")}`);
    console.log(`start: ${chalk.yellow("npm start")}`);
    console.log(`build: ${chalk.yellow("npm build")} \n`);
  }).catch((err) => {
    console.log(chalk.red(`\n‚ùå [${dirName}] build error`));
    console.log(chalk.red(err));
  });
};

module.exports = Creator;